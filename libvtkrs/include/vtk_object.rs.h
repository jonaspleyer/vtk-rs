// AUTO-GENERATED BY cxxbridge

#include "vtk_object.h"
#include <cstdint>

using vtkObject = ::vtkObject;

extern "C" {
void cxxbridge1$debug_on(::vtkObject &vtk_object) noexcept {
  void (*debug_on$)(::vtkObject &) = ::debug_on;
  debug_on$(vtk_object);
}

void cxxbridge1$debug_off(::vtkObject &vtk_object) noexcept {
  void (*debug_off$)(::vtkObject &) = ::debug_off;
  debug_off$(vtk_object);
}

void cxxbridge1$set_debug(::vtkObject &object, bool status) noexcept {
  void (*set_debug$)(::vtkObject &, bool) = ::set_debug;
  set_debug$(object, status);
}

bool cxxbridge1$get_debug(::vtkObject const &object) noexcept {
  bool (*get_debug$)(::vtkObject const &) = ::get_debug;
  return get_debug$(object);
}

void cxxbridge1$modified(::vtkObject const &object) noexcept {
  void (*modified$)(::vtkObject const &) = ::modified;
  modified$(object);
}

void cxxbridge1$remove_observer(::vtkObject &object, ::std::uint64_t tag) noexcept {
  void (*remove_observer$)(::vtkObject &, ::std::uint64_t) = ::remove_observer;
  remove_observer$(object, tag);
}

void cxxbridge1$remove_observers(::vtkObject &object, ::std::uint64_t event) noexcept {
  void (*remove_observers$)(::vtkObject &, ::std::uint64_t) = ::remove_observers;
  remove_observers$(object, event);
}

void cxxbridge1$remove_all_observers(::vtkObject &object) noexcept {
  void (*remove_all_observers$)(::vtkObject &) = ::remove_all_observers;
  remove_all_observers$(object);
}

::std::uint64_t cxxbridge1$has_observer(::vtkObject const &object, ::std::uint64_t event) noexcept {
  ::std::uint64_t (*has_observer$)(::vtkObject const &, ::std::uint64_t) = ::has_observer;
  return has_observer$(object, event);
}
} // extern "C"
