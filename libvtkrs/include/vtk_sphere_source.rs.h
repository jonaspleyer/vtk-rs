// AUTO-GENERATED BY cxxbridge

#include "vtk_sphere_source.h"
#include <array>
#include <new>
#include <utility>
#if defined(_WIN32)
#include <basetsd.h>
#else
#include <sys/types.h>
#endif

namespace rust {
inline namespace cxxbridge1 {
// #include "rust/cxx.h"

#ifndef CXXBRIDGE1_RUST_ISIZE
#define CXXBRIDGE1_RUST_ISIZE
#if defined(_WIN32)
using isize = SSIZE_T;
#else
using isize = ssize_t;
#endif
#endif // CXXBRIDGE1_RUST_ISIZE
} // namespace cxxbridge1
} // namespace rust

using vtkSphereSource = ::vtkSphereSource;

extern "C" {
::vtkSphereSource *cxxbridge1$vtk_sphere_source_new() noexcept {
  ::vtkSphereSource *(*vtk_sphere_source_new$)() = ::vtk_sphere_source_new;
  return vtk_sphere_source_new$();
}

void cxxbridge1$vtk_sphere_source_delete(::vtkSphereSource &ptr) noexcept {
  void (*vtk_sphere_source_delete$)(::vtkSphereSource &) = ::vtk_sphere_source_delete;
  vtk_sphere_source_delete$(ptr);
}

void cxxbridge1$vtk_sphere_source_set_radius(::vtkSphereSource &sphere_source, double radius) noexcept {
  void (*vtk_sphere_source_set_radius$)(::vtkSphereSource &, double) = ::vtk_sphere_source_set_radius;
  vtk_sphere_source_set_radius$(sphere_source, radius);
}

double cxxbridge1$vtk_sphere_source_get_radius(::vtkSphereSource const &sphere_source) noexcept {
  double (*vtk_sphere_source_get_radius$)(::vtkSphereSource const &) = ::vtk_sphere_source_get_radius;
  return vtk_sphere_source_get_radius$(sphere_source);
}

void cxxbridge1$vtk_sphere_source_set_center(::vtkSphereSource &sphere_source, ::std::array<double, 3> *center) noexcept {
  void (*vtk_sphere_source_set_center$)(::vtkSphereSource &, ::std::array<double, 3>) = ::vtk_sphere_source_set_center;
  vtk_sphere_source_set_center$(sphere_source, ::std::move(*center));
}

void cxxbridge1$vtk_sphere_source_get_center(::vtkSphereSource const &sphere_source, ::std::array<double, 3> *return$) noexcept {
  ::std::array<double, 3> (*vtk_sphere_source_get_center$)(::vtkSphereSource const &) = ::vtk_sphere_source_get_center;
  new (return$) ::std::array<double, 3>(vtk_sphere_source_get_center$(sphere_source));
}

void cxxbridge1$vtk_sphere_source_set_phi_resolution(::vtkSphereSource &sphere_source, ::rust::isize resolution) noexcept {
  void (*vtk_sphere_source_set_phi_resolution$)(::vtkSphereSource &, ::rust::isize) = ::vtk_sphere_source_set_phi_resolution;
  vtk_sphere_source_set_phi_resolution$(sphere_source, resolution);
}

void cxxbridge1$vtk_sphere_source_set_theta_resolution(::vtkSphereSource &sphere_source, ::rust::isize resolution) noexcept {
  void (*vtk_sphere_source_set_theta_resolution$)(::vtkSphereSource &, ::rust::isize) = ::vtk_sphere_source_set_theta_resolution;
  vtk_sphere_source_set_theta_resolution$(sphere_source, resolution);
}
} // extern "C"
